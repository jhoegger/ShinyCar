}
)
runApp()
library(shiny)
library(UsingR)
data(galton)
library(datasets)
data(mtcars)
```
```{r}
###Make the data tidy
mtcars$cyl  <-as.factor(mtcars$cyl)
mtcars$vs   <-as.factor(mtcars$vs)
mtcars$am[mtcars$am==0]<-"Auto"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am   <-as.factor(mtcars$am)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
FitModel <- function(data){
}
shinyServer(
function(input, output){
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
fit1 <- lm(mpg ~ am,mtcars)
fit2 <- lm(mpg ~ . ,mtcars)
bestFit <- step(fit2, direction = "backward")
output$fitSum <- summary(bestFit)
fitComp <- anova(fit1, bestFit)
output$newPairs <- pairs(mtcars, panel=panel.smooth,
main="Motor Trends Car Analysis for 1973-74",
col=3)
output$newBoxplot <- boxplot(mtcars$mpg~mtcars$am,col=c("light blue", "light green")
,ylab="mpg",xlab="transmission",main="MPG vs Transmission")
output$odate <- renderPrint({input$date})
output$newHist <- renderPlot({
hist(galton$child, xlab="child height",
col="lightblue", main="histogram")
mu <- input$mu
lines(c(mu, mu), c(0,200), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu=",mu))
text(63,140, paste("MSE=",round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('h2 text'),
h3('h3 text'),
h4('h4 text'),
numericInput('id1', 'Numeric id1',0 , min=0, max=10, step=2),
checkboxGroupInput("id2", "checkbox",
c("value1"="1",
"value2"="2")),
dateInput("date", "Date:"),
sliderInput('mu', 'Guess the mean', value=70, min=62, max=74, step=0.05)
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text'),
h4('you entered'),
verbatimTextOutput("oid1"),
h4('you entered'),
verbatimTextOutput("oid2"),
h4('Summary'),
verbatimTextOutput("fitSum"),
plotOutput('newHist')   #newHist is defined on the server
plotOutput('newPairs')   #newHist is defined on the server
plotOutput('newBoxplot')   #newHist is defined on the server
)
))
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('h2 text'),
h3('h3 text'),
h4('h4 text'),
numericInput('id1', 'Numeric id1',0 , min=0, max=10, step=2),
checkboxGroupInput("id2", "checkbox",
c("value1"="1",
"value2"="2")),
dateInput("date", "Date:"),
sliderInput('mu', 'Guess the mean', value=70, min=62, max=74, step=0.05)
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text'),
h4('you entered'),
verbatimTextOutput("oid1"),
h4('you entered'),
verbatimTextOutput("oid2"),
h4('Summary'),
verbatimTextOutput("fitSum"),
plotOutput('newHist'),   #newHist is defined on the server
plotOutput('newPairs'),   #newHist is defined on the server
plotOutput('newBoxplot')   #newHist is defined on the server
)
))
runApp()
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('h2 text'),
h3('h3 text'),
h4('h4 text'),
numericInput('id1', 'Numeric id1',0 , min=0, max=10, step=2),
checkboxGroupInput("id2", "checkbox",
c("value1"="1",
"value2"="2")),
dateInput("date", "Date:"),
sliderInput('mu', 'Guess the mean', value=70, min=62, max=74, step=0.05)
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text'),
h4('you entered'),
verbatimTextOutput("oid1"),
h4('you entered'),
verbatimTextOutput("oid2"),
h4('you entered'),
verbatimTextOutput("odate"),
plotOutput('newHist'),   #newHist is defined on the server
#        plotOutput('newPairs'),   #newHist is defined on the server
plotOutput('newBoxplot')   #newHist is defined on the server
)
))
shiny::runApp()
library(shiny)
library(UsingR)
data(galton)
library(datasets)
data(mtcars)
```
```{r}
###Make the data tidy
mtcars$cyl  <-as.factor(mtcars$cyl)
mtcars$vs   <-as.factor(mtcars$vs)
mtcars$am[mtcars$am==0]<-"Auto"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am   <-as.factor(mtcars$am)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
FitModel <- function(data){
}
shinyServer(
function(input, output){
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
fit1 <- lm(mpg ~ am,mtcars)
fit2 <- lm(mpg ~ . ,mtcars)
bestFit <- step(fit2, direction = "backward")
#output$fitSum <- summary(bestFit)
fitComp <- anova(fit1, bestFit)
output$newPairs <- pairs(mtcars, panel=panel.smooth,
main="Motor Trends Car Analysis for 1973-74",
col=3)
output$newBoxplot <- boxplot(mtcars$mpg~mtcars$am,col=c("light blue", "light green")
,ylab="mpg",xlab="transmission",main="MPG vs Transmission")
output$odate <- renderPrint({input$date})
output$newHist <- renderPlot({
hist(galton$child, xlab="child height",
col="lightblue", main="histogram")
mu <- input$mu
lines(c(mu, mu), c(0,200), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu=",mu))
text(63,140, paste("MSE=",round(mse, 2)))
})
}
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mtcars[cyl==4,]
mtcars[mtcars$cyl==4,]
numCyl <- c(4)
submtcars <- mtcars[cyl==numCyl,]
mtcars[cyl==numCyl,]
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('h2 text'),
h3('h3 text'),
h4('h4 text'),
numericInput('id1', 'Numeric id1',0 , min=4, max=8, step=4),
checkboxGroupInput("id2", "checkbox",
c("value1"="1",
"value2"="2")),
dateInput("date", "Date:"),
sliderInput('mu', 'Guess the mean', value=70, min=62, max=74, step=0.05)
sliderInput('numGears', 'Guess the mean', value=5, min=3, max=5, step=1)
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text'),
h4('you entered'),
verbatimTextOutput("oid1"),
h4('Number of Gears'),
verbatimTextOutput("numGears"),
h4('you entered'),
verbatimTextOutput("odate"),
plotOutput('newPairs'),   #newHist is defined on the server
plotOutput('newBoxplot'),   #newHist is defined on the server
plotOutput('newHist')   #newHist is defined on the server
)
))
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('h2 text'),
h3('h3 text'),
h4('h4 text'),
numericInput('id1', 'Numeric id1',0 , min=4, max=8, step=4),
checkboxGroupInput("id2", "checkbox",
c("value1"="1",
"value2"="2")),
dateInput("date", "Date:"),
sliderInput('mu', 'Guess the mean', value=70, min=62, max=74, step=0.05),
sliderInput('numGears', 'Guess the mean', value=5, min=3, max=5, step=1)
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text'),
h4('you entered'),
verbatimTextOutput("oid1"),
h4('Number of Gears'),
verbatimTextOutput("numGears"),
h4('you entered'),
verbatimTextOutput("odate"),
plotOutput('newPairs'),   #newHist is defined on the server
plotOutput('newBoxplot'),   #newHist is defined on the server
plotOutput('newHist')   #newHist is defined on the server
)
))
library(shiny)
library(UsingR)
data(galton)
library(datasets)
data(mtcars)
###Make the data tidy
mtcars$cyl  <-as.factor(mtcars$cyl)
mtcars$vs   <-as.factor(mtcars$vs)
mtcars$am[mtcars$am==0]<-"Auto"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am   <-as.factor(mtcars$am)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
shinyServer(
function(input, output){
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$onumGears <- renderPrint({input$numGears})
numGears
numCyl <- c(4)
submtcars <- mtcars[cyl=={input$id1},]
fit1 <- lm(mpg ~ am,mtcars)
fit2 <- lm(mpg ~ . ,mtcars)
bestFit <- step(fit2, direction = "backward")
#output$fitSum <- summary(bestFit)
fitComp <- anova(fit1, bestFit)
output$newPairs <- renderPlot({
pairs(mtcars, panel=panel.smooth,
main="Motor Trends Car Analysis for 1973-74", col=3)
})
output$newBoxplot <- renderPlot({
boxplot(mtcars$mpg~mtcars$am,col=c("light blue", "light green"),
ylab="mpg",xlab="transmission",main="MPG vs Transmission")
})
output$odate <- renderPrint({input$date})
output$newHist <- renderPlot({
hist(galton$child, xlab="child height",
col="lightblue", main="histogram")
mu <- input$mu
lines(c(mu, mu), c(0,200), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu=",mu))
text(63,140, paste("MSE=",round(mse, 2)))
})
}
)
shiny::runApp()
numCyl <- 4
mtcars[cyl<=numCyl,]
mtcars[mtcars$cyl<=numCyl,]
numCyl <- 6
mtcars[mtcars$cyl<=numCyl,]
library(shiny)
library(UsingR)
data(galton)
library(datasets)
data(mtcars)
###Make the data tidy
mtcars$cyl  <-as.factor(mtcars$cyl)
mtcars$vs   <-as.factor(mtcars$vs)
mtcars$am[mtcars$am==0]<-"Auto"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am   <-as.factor(mtcars$am)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
shinyServer(
function(input, output){
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$onumGears <- renderPrint({input$numGears})
numGears
numCyl <- {input$id1}
submtcars <- mtcars[mtcars$cyl<=numCyl,]
fit1 <- lm(mpg ~ am,mtcars)
fit2 <- lm(mpg ~ . ,mtcars)
bestFit <- step(fit2, direction = "backward")
#output$fitSum <- summary(bestFit)
fitComp <- anova(fit1, bestFit)
output$newPairs <- renderPlot({
pairs(mtcars, panel=panel.smooth,
main="Motor Trends Car Analysis for 1973-74", col=3)
})
output$newBoxplot <- renderPlot({
boxplot(mtcars$mpg~mtcars$am,col=c("light blue", "light green"),
ylab="mpg",xlab="transmission",main="MPG vs Transmission")
})
output$odate <- renderPrint({input$date})
output$newHist <- renderPlot({
hist(galton$child, xlab="child height",
col="lightblue", main="histogram")
mu <- input$mu
lines(c(mu, mu), c(0,200), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu=",mu))
text(63,140, paste("MSE=",round(mse, 2)))
})
}
)
library(shiny)
library(UsingR)
data(galton)
library(datasets)
data(mtcars)
###Make the data tidy
mtcars$cyl  <-as.factor(mtcars$cyl)
mtcars$vs   <-as.factor(mtcars$vs)
mtcars$am[mtcars$am==0]<-"Auto"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am   <-as.factor(mtcars$am)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
shinyServer(
function(input, output){
#        output$oid1 <- renderPrint({input$id1})
#        output$oid2 <- renderPrint({input$id2})
output$onumCyl<- renderPrint({input$idCyl})
output$onumGears<- renderPrint({input$idGears})
numCyl <- {input$idCyl}
submtcars <- mtcars[mtcars$cyl<=numCyl,]
fit1 <- lm(mpg ~ am,mtcars)
fit2 <- lm(mpg ~ . ,mtcars)
bestFit <- step(fit2, direction = "backward")
#output$fitSum <- summary(bestFit)
fitComp <- anova(fit1, bestFit)
output$newPairs <- renderPlot({
pairs(mtcars, panel=panel.smooth,
main="Motor Trends Car Analysis for 1973-74", col=3)
})
output$newBoxplot <- renderPlot({
boxplot(mtcars$mpg~mtcars$am,col=c("light blue", "light green"),
ylab="mpg",xlab="transmission",main="MPG vs Transmission")
})
output$odate <- renderPrint({input$date})
#        output$newHist <- renderPlot({
#            hist(galton$child, xlab="child height",
#                 col="lightblue", main="histogram")
#            mu <- input$mu
#            lines(c(mu, mu), c(0,200), col="red", lwd=5)
#            mse <- mean((galton$child - mu)^2)
#            text(63,150, paste("mu=",mu))
#            text(63,140, paste("MSE=",round(mse, 2)))
#        })
}
)
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
numericInput('id1', 'Numeric id1',0 , min=4, max=8, step=4),
checkboxGroupInput("id2", "checkbox",
c("value1"="1",
"value2"="2")),
dateInput("date", "Date:"),
sliderInput('idCyl', 'Guess the mean', value=70, min=62, max=74, step=0.05),
sliderInput('idGears', 'Number of Gears', value=5, min=3, max=5, step=1)
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text'),
#        h4('you entered'),
#        verbatimTextOutput("oid1"),
h4('Number of Gears'),
verbatimTextOutput("onumGears"),
h4('you entered'),
verbatimTextOutput("odate"),
plotOutput('newPairs'),   #newHist is defined on the server
plotOutput('newBoxplot')   #newHist is defined on the server
#        plotOutput('newHist')   #newHist is defined on the server
)
))
shiny::runApp()
library(shiny)
library(UsingR)
data(galton)
library(datasets)
data(mtcars)
###Make the data tidy
mtcars$cyl  <-as.factor(mtcars$cyl)
mtcars$vs   <-as.factor(mtcars$vs)
mtcars$am[mtcars$am==0]<-"Auto"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am   <-as.factor(mtcars$am)
mtcars$gear <-as.factor(mtcars$gear)
mtcars$carb <-as.factor(mtcars$carb)
shinyServer(
function(input, output){
output$onumCly <- renderPrint({input$idCyl})
output$onumGears <- renderPrint({input$idGears})
#numGears
numCyl <- {input$idCyl}
submtcars <- mtcars[mtcarscyl<=numCyl,]
fit1 <- lm(mpg ~ am,mtcars)
fit2 <- lm(mpg ~ . ,mtcars)
bestFit <- step(fit2, direction = "backward")
#output$fitSum <- summary(bestFit)
fitComp <- anova(fit1, bestFit)
output$newPairs <- renderPlot({
pairs(mtcars, panel=panel.smooth,
main="Motor Trends Car Analysis for 1973-74", col=3)
})
output$newBoxplot <- renderPlot({
boxplot(mtcars$mpg~mtcars$am,col=c("light blue", "light green"),
ylab="mpg",xlab="transmission",main="MPG vs Transmission")
})
output$odate <- renderPrint({input$date})
output$newHist <- renderPlot({
hist(galton$child, xlab="child height",
col="lightblue", main="histogram")
mu <- input$mu
lines(c(mu, mu), c(0,200), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu=",mu))
text(63,140, paste("MSE=",round(mse, 2)))
})
}
)
shiny::runApp()
count(mtcars)
nrows(mtcars)
nrow(mtcars)
(nrow(submtcars))
numCyl <- {input$idCyl}
shiny::runApp()
(nrow(mtcars))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/GitHub/ShinyCar")
setwd("C:/GitHub/ShinyCar")
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jhoegger', token='64F881CFA1C48CF99B7FBD2748D7AC2D', secret='Zqb8LsilsDcuiDGOCEwyhSUyi/FjdY1bIsJ04y4y')
deployApp()
library(shinyapps)
shinyapps::deployApp('C:/GitHub/ShinyCar')
library(slidify)
setwd('C:/GitHub/ShinyCar/slides')
author("Shiny Car App")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
setwd('C:/GitHub/ShinyCar')
nrow(mtcars)
========================================================
About the Analysis
========================================================
The application compares auto and manual transmissions
using a t-test to assess the impact on Mile per Gallon
options(rpubs.upload.method = "internal")
setwd('C:/GitHub/ShinyCar/slides')
setwd('C:/GitHub/ShinyCar/slides/Shiny Car App')
